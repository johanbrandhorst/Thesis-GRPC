// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gRPC.proto

/*
Package gRPC is a generated protocol buffer package.

It is generated from these files:
	gRPC.proto

It has these top-level messages:
	User
	Message
	Request
	Response
	AttackUser
	AlertUser
*/
package gRPC

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Ip   string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type Message struct {
	Sender   *User  `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	Receiver *User  `protobuf:"bytes,2,opt,name=receiver" json:"receiver,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Message) GetSender() *User {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Message) GetReceiver() *User {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Request struct {
	Num int32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Request) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Response struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type AttackUser struct {
	Targetid   int32 `protobuf:"varint,1,opt,name=targetid" json:"targetid,omitempty"`
	Attackerid int32 `protobuf:"varint,2,opt,name=attackerid" json:"attackerid,omitempty"`
}

func (m *AttackUser) Reset()                    { *m = AttackUser{} }
func (m *AttackUser) String() string            { return proto.CompactTextString(m) }
func (*AttackUser) ProtoMessage()               {}
func (*AttackUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AttackUser) GetTargetid() int32 {
	if m != nil {
		return m.Targetid
	}
	return 0
}

func (m *AttackUser) GetAttackerid() int32 {
	if m != nil {
		return m.Attackerid
	}
	return 0
}

type AlertUser struct {
	Attackerid int32 `protobuf:"varint,1,opt,name=attackerid" json:"attackerid,omitempty"`
	Targetid   int32 `protobuf:"varint,2,opt,name=targetid" json:"targetid,omitempty"`
}

func (m *AlertUser) Reset()                    { *m = AlertUser{} }
func (m *AlertUser) String() string            { return proto.CompactTextString(m) }
func (*AlertUser) ProtoMessage()               {}
func (*AlertUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AlertUser) GetAttackerid() int32 {
	if m != nil {
		return m.Attackerid
	}
	return 0
}

func (m *AlertUser) GetTargetid() int32 {
	if m != nil {
		return m.Targetid
	}
	return 0
}

func init() {
	proto.RegisterType((*User)(nil), "gRPC.User")
	proto.RegisterType((*Message)(nil), "gRPC.Message")
	proto.RegisterType((*Request)(nil), "gRPC.Request")
	proto.RegisterType((*Response)(nil), "gRPC.Response")
	proto.RegisterType((*AttackUser)(nil), "gRPC.AttackUser")
	proto.RegisterType((*AlertUser)(nil), "gRPC.AlertUser")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GRPC service

type GRPCClient interface {
	ConnectUser(ctx context.Context, in *User, opts ...grpc.CallOption) (GRPC_ConnectUserClient, error)
	MessageUser(ctx context.Context, opts ...grpc.CallOption) (GRPC_MessageUserClient, error)
	BidiInt(ctx context.Context, opts ...grpc.CallOption) (GRPC_BidiIntClient, error)
}

type gRPCClient struct {
	cc *grpc.ClientConn
}

func NewGRPCClient(cc *grpc.ClientConn) GRPCClient {
	return &gRPCClient{cc}
}

func (c *gRPCClient) ConnectUser(ctx context.Context, in *User, opts ...grpc.CallOption) (GRPC_ConnectUserClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPC_serviceDesc.Streams[0], c.cc, "/gRPC.gRPC/ConnectUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConnectUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPC_ConnectUserClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type gRPCConnectUserClient struct {
	grpc.ClientStream
}

func (x *gRPCConnectUserClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCClient) MessageUser(ctx context.Context, opts ...grpc.CallOption) (GRPC_MessageUserClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPC_serviceDesc.Streams[1], c.cc, "/gRPC.gRPC/MessageUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCMessageUserClient{stream}
	return x, nil
}

type GRPC_MessageUserClient interface {
	Send(*Message) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type gRPCMessageUserClient struct {
	grpc.ClientStream
}

func (x *gRPCMessageUserClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCMessageUserClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCClient) BidiInt(ctx context.Context, opts ...grpc.CallOption) (GRPC_BidiIntClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPC_serviceDesc.Streams[2], c.cc, "/gRPC.gRPC/BidiInt", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCBidiIntClient{stream}
	return x, nil
}

type GRPC_BidiIntClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type gRPCBidiIntClient struct {
	grpc.ClientStream
}

func (x *gRPCBidiIntClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCBidiIntClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GRPC service

type GRPCServer interface {
	ConnectUser(*User, GRPC_ConnectUserServer) error
	MessageUser(GRPC_MessageUserServer) error
	BidiInt(GRPC_BidiIntServer) error
}

func RegisterGRPCServer(s *grpc.Server, srv GRPCServer) {
	s.RegisterService(&_GRPC_serviceDesc, srv)
}

func _GRPC_ConnectUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCServer).ConnectUser(m, &gRPCConnectUserServer{stream})
}

type GRPC_ConnectUserServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type gRPCConnectUserServer struct {
	grpc.ServerStream
}

func (x *gRPCConnectUserServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPC_MessageUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCServer).MessageUser(&gRPCMessageUserServer{stream})
}

type GRPC_MessageUserServer interface {
	SendAndClose(*Response) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type gRPCMessageUserServer struct {
	grpc.ServerStream
}

func (x *gRPCMessageUserServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCMessageUserServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GRPC_BidiInt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCServer).BidiInt(&gRPCBidiIntServer{stream})
}

type GRPC_BidiIntServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type gRPCBidiIntServer struct {
	grpc.ServerStream
}

func (x *gRPCBidiIntServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCBidiIntServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC.gRPC",
	HandlerType: (*GRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectUser",
			Handler:       _GRPC_ConnectUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MessageUser",
			Handler:       _GRPC_MessageUser_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidiInt",
			Handler:       _GRPC_BidiInt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gRPC.proto",
}

func init() { proto.RegisterFile("gRPC.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcd, 0x6a, 0xeb, 0x30,
	0x10, 0x85, 0x91, 0xf3, 0xe3, 0x64, 0xc2, 0x0d, 0x97, 0x59, 0x14, 0x93, 0x42, 0x09, 0x5a, 0x94,
	0x50, 0x4a, 0x08, 0xe9, 0xae, 0xbb, 0x24, 0x8b, 0xb6, 0x8b, 0x42, 0x10, 0xf4, 0x01, 0xdc, 0x78,
	0x08, 0xa2, 0x89, 0xec, 0x4a, 0x72, 0x9f, 0xa3, 0x8f, 0x5c, 0x3c, 0x96, 0x4d, 0xdc, 0x6e, 0xcc,
	0x1c, 0xcd, 0xc7, 0x99, 0xd1, 0xb1, 0x00, 0x8e, 0x6a, 0xbf, 0x5b, 0x16, 0x36, 0xf7, 0x39, 0xf6,
	0xab, 0x5a, 0x3e, 0x42, 0xff, 0xcd, 0x91, 0xc5, 0x29, 0x44, 0x3a, 0x4b, 0xc4, 0x5c, 0x2c, 0x06,
	0x2a, 0xd2, 0x19, 0x22, 0xf4, 0x4d, 0x7a, 0xa6, 0x24, 0x9a, 0x8b, 0xc5, 0x58, 0x71, 0xcd, 0x4c,
	0x91, 0xf4, 0xf8, 0x24, 0xd2, 0x85, 0xcc, 0x21, 0x7e, 0x25, 0xe7, 0xd2, 0x23, 0xa1, 0x84, 0xa1,
	0x23, 0x93, 0x91, 0x65, 0x8b, 0xc9, 0x1a, 0x96, 0x3c, 0xa9, 0xb2, 0x56, 0xa1, 0x83, 0xb7, 0x30,
	0xb2, 0x74, 0x20, 0xfd, 0x45, 0x96, 0x6d, 0xbb, 0x54, 0xdb, 0xc3, 0x04, 0xe2, 0x73, 0x6d, 0x1b,
	0x66, 0x35, 0x52, 0x5e, 0x43, 0xac, 0xe8, 0xb3, 0x24, 0xe7, 0xf1, 0x3f, 0xf4, 0x4c, 0x79, 0x0e,
	0x0b, 0x57, 0xa5, 0x94, 0x30, 0x52, 0xe4, 0x8a, 0xdc, 0x38, 0xc2, 0x2b, 0x18, 0x5a, 0x72, 0xe5,
	0xc9, 0x07, 0x20, 0x28, 0xf9, 0x0c, 0xb0, 0xf1, 0x3e, 0x3d, 0x7c, 0xf0, 0x9d, 0x67, 0x30, 0xf2,
	0xa9, 0x3d, 0x92, 0x6f, 0x6f, 0xde, 0x6a, 0xbc, 0x01, 0x48, 0x99, 0x24, 0xab, 0x33, 0x5e, 0x77,
	0xa0, 0x2e, 0x4e, 0xe4, 0x13, 0x8c, 0x37, 0x27, 0xb2, 0x9e, 0x8d, 0xba, 0xb0, 0xf8, 0x0d, 0x77,
	0x06, 0x45, 0xdd, 0x41, 0xeb, 0x6f, 0x01, 0xfc, 0x27, 0xf0, 0x0e, 0x26, 0xbb, 0xdc, 0x18, 0x3a,
	0xd4, 0x9e, 0x17, 0xd9, 0xcc, 0xfe, 0xd5, 0x75, 0x08, 0x7b, 0x25, 0x70, 0x09, 0x93, 0x20, 0x98,
	0xed, 0xf6, 0x67, 0xd3, 0x5a, 0x36, 0x69, 0x2c, 0x04, 0xde, 0x43, 0xbc, 0xd5, 0x99, 0x7e, 0x31,
	0xbe, 0x61, 0x43, 0x8e, 0x7f, 0xd9, 0x95, 0xd8, 0x4e, 0xeb, 0x8d, 0xb6, 0xfc, 0xdd, 0x8b, 0xf7,
	0x21, 0x3f, 0x98, 0x87, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x78, 0x06, 0x0e, 0x3e, 0x02,
	0x00, 0x00,
}
